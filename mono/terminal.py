import os
import shutil
import tkinter as tk
from threading import Thread
from typing import List

if os.name == "nt":
    from winpty import PtyProcess as PTY
else:
    from ptyprocess import PtyProcessUnicode as PTY

from mono.parser import OutputParser
from mono.theme import Theme
from mono.utils import Scrollbar

from .text import TerminalText


class Terminal(tk.Frame):
    """Terminal abstract class. All shell types should inherit from this class.

    The inherited class should implement following attributes:
        name (str): Name of the terminal.
        shell (str): command / path to shell executable.

    Args:
        master (tk.Tk): Main window.
        cwd (str): Working directory."""

    name: str
    shell: str

    def __init__(
        self, master, cwd=".", theme: Theme = None, standalone=True, *args, **kwargs
    ) -> None:
        super().__init__(master, *args, **kwargs)
        self.master = master
        self.standalone = standalone
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.alive = False
        self.cwd = cwd
        self.p = None

        if self.standalone:
            self.base = self

            from .styles import Styles
            from .theme import Theme

            self.theme = theme or Theme()
            self.style = Styles(self, self.theme)
        else:
            self.base = master.base
            self.theme = self.base.theme

        self.text = TerminalText(
            self, relief=tk.FLAT, padx=10, pady=10, font=("Consolas", 11)
        )
        self.text.config(
            bg=self.theme.terminal[0],
            fg=self.theme.terminal[1],
            insertbackground=self.theme.terminal[1],
        )
        self.text.grid(row=0, column=0, sticky=tk.NSEW)
        self.text.bind("<Return>", self.enter)

        self.parser = OutputParser(self)

        self.terminal_scrollbar = Scrollbar(self, style="MonoScrollbar")
        self.terminal_scrollbar.grid(row=0, column=1, sticky="NSW")

        self.text.config(yscrollcommand=self.terminal_scrollbar.set)
        self.terminal_scrollbar.config(command=self.text.yview, orient=tk.VERTICAL)

        self.text.tag_config("prompt", foreground="orange")
        self.text.tag_config("command", foreground="yellow")

        self.bind("<Destroy>", self.stop_service)

    def check_shell(self):
        self.shell = shutil.which(self.shell)
        return self.shell

    def start_service(self, *_) -> None:
        self.alive = True
        self.last_command = None

        self.p = PTY.spawn([self.shell])
        Thread(target=self._write_loop, daemon=True).start()

    def stop_service(self, *_) -> None:
        self.alive = False

    def run_command(self, command: str) -> None:
        # TODO: Implement a queue for running multiple commands.

        self.text.insert("end", command, "command")
        self.enter()

    def clear(self) -> None:
        self.text.clear()

    def enter(self, *_) -> None:
        command = self.text.get("input", "end")
        self.last_command = command
        self.text.register_history(command)
        if command.strip():
            self.text.delete("input", "end")

        self.p.write(command + "\r\n")
        return "break"

    def _write_loop(self) -> None:
        while self.alive:
            if buf := self.p.read():
                self.text.flush_insert("".join(self.parser.parse(buf)))

    # C0 handlers

    def _bell(self):
        self.bell()

    def _backspace(self): ...
    def _tab(self): ...
    def _newline(self): ...
    def _formfeed(self): ...
    def _carriage_return(self): ...

    # CSI sequence handlers
    def _insert_characters(self, params: List[str]): ...
    def _cursor_up(self, params: List[str]): ...
    def _cursor_down(self, params: List[str]): ...
    def _cursor_forward(self, params: List[str]): ...
    def _cursor_backward(self, params: List[str]): ...
    def _cursor_next_line(self, params: List[str]): ...
    def _cursor_previous_line(self, params: List[str]): ...
    def _cursor_horizontal_absolute(self, params: List[str]): ...
    def _cursor_position(self, params: List[str]): ...
    def _cursor_forward_tabulation(self, params: List[str]): ...
    def _erase_in_display(self, params: List[str]): ...
    def _erase_in_line(self, params: List[str]): ...
    def _insert_lines(self, params: List[str]): ...
    def _delete_lines(self, params: List[str]): ...
    def _delete_characters(self, params: List[str]): ...
    def _scroll_up(self, params: List[str]): ...
    def _scroll_down(self, params: List[str]): ...
    def _erase_characters(self, params: List[str]): ...
    def _cursor_backward_tabulation(self, params: List[str]): ...
    def _character_position_absolute(self, params: List[str]): ...
    def _character_position_relative(self, params: List[str]): ...
    def _repeat_preceding_character(self, params: List[str]): ...
    def _send_device_attributes(self, params: List[str]): ...
    def _line_position_absolute(self, params: List[str]): ...
    def _line_position_relative(self, params: List[str]): ...
    def _tab_clear(self, params: List[str]): ...
    def _set_mode(self, params: List[str]): ...
    def _reset_mode(self, params: List[str]): ...
    def _device_status_report(self, params: List[str]): ...
    def _set_keyboard_string(self, params: List[str]): ...
    def _set_cursor_style(self, params: List[str]): ...
    def _set_scrolling_region(self, params: List[str]): ...
    def _save_cursor_position(self): ...
    def _window_manipulation(self, params: List[str]): ...
    def _restore_cursor_position(self): ...
    def _request_terminal_parameters(self, params: List[str]): ...
    def _select_locator_events(self, params: List[str]): ...
    def _request_locator_position(self, params: List[str]): ...

    # OSC (Operating System Command) handlers
    def _set_window_title(self, title: str): ...
    def _set_x_property(self, prop: str, value: str): ...
    def _set_color_mode(self, mode: str): ...
    def _set_current_directory(self, directory: str): ...
    def _send_notification(self, message: str): ...
    def _set_cursor_color(self, color: str): ...
    def _set_mouse_fore_color(self, color: str): ...
    def _set_mouse_back_color(self, color: str): ...
    def _set_tek_fore_color(self, color: str): ...
    def _set_tek_back_color(self, color: str): ...
    def _set_highlight_bg_color(self, color: str): ...
    def _set_tek_cursor_color(self, color: str): ...
    def _set_highlight_fg_color(self, color: str): ...
    def _set_log_file(self, file_path: str): ...
    def _set_font(self, font_string: str): ...
    def _set_emoji_font(self, font_string: str): ...
    def _query_color(self, color_index: int): ...
    def _set_color(self, color_index: int, color_spec: str): ...
    def _query_special_color(self, color_name: str): ...
    def _set_special_color(self, color_name: str, color_spec: str): ...
    def _set_hyperlink(self, params: dict, uri: str): ...
    def _query_selection_data(self, clipboard: str): ...
    def _set_selection_data(self, clipboard: str, data: str): ...
    def _reset_color_palette(self): ...
    def _reset_special_color(self, color_name: str): ...
    def _reset_foreground_color(self): ...
    def _reset_background_color(self): ...
    def _reset_cursor_color(self): ...
    def _reset_cursor_color(self): ...
    def _reset_mouse_fore_color(self): ...
    def _reset_mouse_back_color(self): ...
    def _reset_tek_fore_color(self): ...
    def _reset_tek_back_color(self): ...
    def _reset_highlight_bg_color(self): ...
    def _reset_tek_cursor_color(self): ...
    def _reset_highlight_fg_color(self): ...

    # DCS (Device Control String) handlers
    def _report_sgr_attributes(self, params: List[str]): ...
    def _report_margins(self): ...
    def _report_terminfo(self, params: List[str]): ...
    def _report_cursor_info(self): ...
    def _restore_presentation_state(self): ...
    def _process_regis(self): ...
    def _program_function_key(self): ...
    def _program_key_action(self): ...
    def _set_character_attributes(self): ...
    def _define_user_keys(self): ...

    # Simple escape sequence handlers
    def _index(self): ...
    def _reverse_index(self): ...
    def _next_line(self): ...
    def _save_cursor(self): ...
    def _restore_cursor(self): ...
    def _set_tab_stop(self): ...
    def _shift_to_g2(self): ...
    def _shift_to_g3(self): ...
    def _set_keypad_application_mode(self): ...
    def _set_keypad_numeric_mode(self): ...
    def _full_reset(self): ...
    def _set_double_height_top(self): ...
    def _set_double_height_bottom(self): ...
    def _set_single_width(self): ...
    def _set_double_width(self): ...
    def _screen_alignment_test(self): ...
    def _scroll_up(self): ...
    def _scroll_down(self): ...

    # SGR (Select Graphic Rendition) handlers
    def _reset_attributes(self): ...
    def _set_bold(self): ...
    def _set_faint(self): ...
    def _set_italic(self): ...
    def _set_underline(self): ...
    def _set_slow_blink(self): ...
    def _set_rapid_blink(self): ...
    def _set_reverse_video(self): ...
    def _set_conceal(self): ...
    def _set_crossed_out(self): ...
    def _set_primary_font(self): ...
    def _set_alternative_font(self, font_number): ...
    def _set_fraktur(self): ...
    def _set_doubly_underlined(self): ...
    def _reset_intensity(self): ...
    def _reset_italic_fraktur(self): ...
    def _reset_underline(self): ...
    def _reset_blink(self): ...
    def _reset_inverse(self): ...
    def _reset_conceal(self): ...
    def _reset_crossed_out(self): ...
    def _set_foreground_color(self, color_code): ...
    def _set_background_color(self, color_code): ...
    def _set_foreground_color_extended(self, params): ...
    def _set_background_color_extended(self, params): ...
    def _reset_foreground_color(self): ...
    def _reset_background_color(self): ...
    def _set_bright_foreground_color(self, color_code): ...
    def _set_bright_background_color(self, color_code): ...
    def _set_foreground_color_rgb(self, r, g, b): ...
    def _set_background_color_rgb(self, r, g, b): ...
    def _set_foreground_color_256(self, color_code): ...
    def _set_background_color_256(self, color_code): ...

    # C1 handlers
    def _ctrl_key(self, key: str) -> None: ...

    def __str__(self) -> str:
        return self.name
